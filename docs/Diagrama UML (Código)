@startuml
skinparam direction "top to bottom"
skinparam classAttributeIconSize 0

class Battle{
    -Player Player1
    -Player Player2
    +Shift shift
    +StartBattle()
    +StartGame()
    +PlayShift(Player actualPlayer, Player enemyPlayer)
    +Attack(Player actualPlayer, Player enemyPlayer)
    +UseItem(Player player)
    +SwitchPokemon(Player player)
    +ShowItemsByPlayer()
    +ShowPokemonsToSwitch()
}

interface IBattle {
    +PlayShift(Player actualPlayer, Player enemyPlayer)
    +UseItem(Player player)
    +Attack(Player actualPlayer, Player enemyPlayer)
    +SwitchPokemon(Player player)
}

Battle ..|> IBattle

class Player{
    +NamePlayer : String
    +Member : DiscordMember
    +Team : List~Pokemon~
    +actualPokemon : Pokemon
    +Inventario : List~IItem~
    +Superpotion : SuperPotion
    +Revive : Revive
    +Totalcure : TotalCure
    +InGame : bool
    -int ShiftPersonal
    +RegisterSpecialAttack(string nombreAtaque, int ShiftActual)
    +CanUseEspecialAttack(string nombreAtaque, int ShiftActual)
    +ObtainLastShiftofAttack(string nombreAtaque)
    +IncrementPersonalShift()
    +ObtainPersonalShift()
}

interface IPlayer{
    +NamePlayer : String
    +Team : List~Pokemon~
    +actualPokemon : Pokemon
    +Inventario : List~IItem~
    +SuperPotion : SuperPotion
    +Revive : Revive
    +TotalCure : TotalCure
    +ChooseTeam(string pokemon)
    +SwitchPokemon(int indice)
    +TAllOutOfCombat()
    +InGame : bool
}

Player ..|> IPlayer

class Pokemon{
    +Name : String
    +Health : double
    +HealthMax : double
    +Attack : int
    +Defense : int
    +SpecialAttack : int
    +SpecialDefense : int
    +Type : Type
    +Moves : List~Move~
    +Status : SpecialStatus
    +TSleepTurnsLeft : int
    +CalculateDamage(Move movimiento, double efectividad, Pokemon oponente)
    +CanAttack()
    +Attack(Pokemon oponente, Move movimiento)
    +ProcessStatus(Pokemon oponente = null)
    +OutOfAction()
    +Paralyze()
    +Sleep()
}

interface IPokemon{
    +Name : String
    +Health : double
    +HealthMax : double
    +Attack : int
    +Defense : int
    +SpecialAttack : int
    +SpecialDefense : int
    +Type : Type
    +Moves : List~Move~
    +Status : SpecialStatus
    +TSleepTurnsLeft : int
    +CalculateDamage(Move movimiento, double efectividad, Pokemon oponente)
    +CanAttack()
    +Attack(Pokemon oponente, Move movimiento)
    +ProcessStatus(Pokemon oponente = null)
    +OutOfAction()
}

Pokemon ..|> IPokemon

class Move {
    +MoveName : String
    +Power : int
    +Accuracy : int
    +ExecuteMove(target : Pokemon)
    +MoveDetail : MoveDetail
    +SpecialStatus : SpecialStatus
}

class MoveDetail {
    +Name : String
    +Power : int
    +Accuracy : int
}

class Type{
    +TypeDetail : TypeDetail
    +Effectiveness : Dictionary~string, double~
    +SetType(string name)
}

class TypeDetail {
    +Name : String
}

class SpecialStatus {
    <<enumeration>>
    NoneStatus
    Asleep
    Paralyzed
    Poisoned
    Burned
}

class Items{
    +MaxHealt : int
    +ItemsName : String
    +ItemsDescription : String
    +Quantity : int
    +UseItem(Pokemon pokemon)
}

interface IItem{
    +MaxHealt : int
    +ItemsName : String
    +ItemsDescription : String
    +Quantity : int
    +UseItem(Pokemon pokemon)
    +Consume()
}

Items ..|> IItem

abstract class Items
Items <|-- SuperPotion
Items <|-- Revive
Items <|-- TotalCure

class SuperPotion{
    +HpRecovered : int
    +Use(Pokemon pokemon)
}

class Revive{
    +Use(Pokemon pokemon)
}

class TotalCure{
    +Use(Pokemon pokemon)
}

class Shift{
    +Player actualPlayer
    +Player enemyPlayer
    +int shiftNumber
    +SwitchShift()
    +ShowShift()
    -int actualShift
    +ExecuteSpecialAttack(Player player, Pokemon attacker, Move movements, int actualShift)
}

class Stat {
    +StatsDetail : StatsDetail
    +int base_stat
}

class StatsDetail {
    +Name : String
}

class IPokemonApi{
    +GetPokemonDetails(string pokemonId) : Task~Pokemon~
    +GetMoveDetails(string url) : Task~MoveDetail~
}

class PokemonApi{
    -HttpClient httpClient
}

PokemonApi ..|> IPokemonApi

class IPokemonCreator{
    +CreatePokemon(string pokemonId) : Task~Pokemon~
}

class PokemonCreator{
    -IPokemonApi pokemonApi
    +GetMoves(List~Move~ listMoves, string pokemonId)
    +AssignSpecialStatus(Pokemon pokemon)
}

PokemonCreator ..|> IPokemonCreator

Battle *-- Shift : "Composition"
Player *-- Pokemon : "Composition"
Move *-- MoveDetail : "Composition"
Pokemon *-- Type : "Composition"
Pokemon *-- Stat : "Composition"
Pokemon *-- Move : "Composition"
Pokemon *-- SpecialStatus : "Composition"
Shift *-- Player : "Composition"
Type *-- TypeDetail : "Composition"
Stat *-- StatsDetail : "Composition"

Battle o-- Player : "Aggregation"
IPlayer o-- Pokemon : "Aggregation"
IPlayer o-- IItem : "Aggregation"
IPlayer o-- SuperPotion : "Aggregation"
IPlayer o-- Revive : "Aggregation"
IPlayer o-- TotalCure : "Aggregation"
IPokemon o-- Type : "Aggregation"
IPokemon o-- Move : "Aggregation"
IPokemon o-- SpecialStatus : "Aggregation"
IPokemonApi o-- Pokemon : "Aggregation"
IPokemonApi o-- MoveDetail : "Aggregation"
IPokemonCreator o-- Pokemon : "Aggregation"
Items o-- Pokemon : "Aggregation"
Player o-- Items : "Aggregation"
Player o-- SuperPotion : "Aggregation"
Player o-- Revive : "Aggregation"
Player o-- TotalCure : "Aggregation"
PokemonApi o-- Pokemon : "Aggregation"
PokemonApi o-- MoveDetail : "Aggregation"
PokemonCreator o-- Pokemon : "Aggregation"
Revive o-- Pokemon : "Aggregation"
SuperPotion o-- Pokemon : "Aggregation"
TotalCure o-- Pokemon : "Aggregation"
TotalCure <|-- Items : "Inheritance"
SuperPotion <|-- Items : "Inheritance"
Revive <|-- Items : "Inheritance"
@enduml